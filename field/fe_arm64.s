// Copyright (c) 2020 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//go:build arm64 && gc && !purego

#include "textflag.h"

// carryPropagate works exactly like carryPropagateGeneric and uses the
// same AND, ADD, and LSR+MADD instructions emitted by the compiler, but
// avoids loading R0-R4 twice and uses LDP and STP.
//
// See https://golang.org/issues/43145 for the main compiler issue.
//
// func carryPropagate(v *Element)
TEXT ·carryPropagate(SB),NOFRAME|NOSPLIT,$0-8
	MOVD v+0(FP), R20

	LDP 0(R20), (R0, R1)
	LDP 16(R20), (R2, R3)
	MOVD 32(R20), R4

	AND $0x7ffffffffffff, R0, R10
	AND $0x7ffffffffffff, R1, R11
	AND $0x7ffffffffffff, R2, R12
	AND $0x7ffffffffffff, R3, R13
	AND $0x7ffffffffffff, R4, R14

	ADD R0>>51, R11, R11
	ADD R1>>51, R12, R12
	ADD R2>>51, R13, R13
	ADD R3>>51, R14, R14
	// R4>>51 * 19 + R10 -> R10
	LSR $51, R4, R21
	MOVD $19, R22
	MADD R22, R10, R21, R10

	STP (R10, R11), 0(R20)
	STP (R12, R13), 16(R20)
	MOVD R14, 32(R20)

	RET

TEXT ·feSquare(SB),NOFRAME|NOSPLIT,$0-16
	LDP (R1), (R6, R5)
	LDP 16(R1), (R4, R11)
	MOVD 32(R1), R10
	ADD R5<<2, R5, R3
	LSL $1, R6, R13
	MUL R6, R6, R17
	LSL $1, R5, R9
	ADD R4<<2, R4, R2
	LSL $2, R3, R3
	SUB R5, R3, R3
	ADD R11<<2, R11, R7
	LSL $2, R2, R2
	ADD R10<<2, R10, R15
	SUB R4, R2, R2
	LSL $1, R3, R3
	LSL $2, R15, R15
	MUL R5, R5, R14
	LSL $1, R2, R1
	LSL $2, R7, R2
	MUL R10, R3, R7
	SUB R11, R2, R2
	UMULH R10, R3, R3
	SUB R10, R15, R15
	MUL R11, R1, R8
	LSL $1, R2, R12
	UMULH R11, R1, R16
	ADDS R8, R7, R7
	UMULH R6, R6, R8
	ADC R16, R3, R3
	MUL R10, R1, R6
	MUL R5, R13, R16
	ADDS R17, R7, R7
	ADC R8, R3, R3
	UMULH R10, R1, R1
	UMULH R5, R13, R8
	ADDS R16, R6, R6
	MUL R11, R2, R16
	EXTR $51, R7, R3, R3
	UMULH R11, R2, R2
	ADC R8, R1, R1
	ADDS R16, R6, R16
	MUL R10, R12, R8
	MUL R13, R4, R6
	ADC R2, R1, R1
	UMULH R10, R12, R12
	AND $2251799813685247, R7, R7
	UMULH R13, R4, R2
	ADDS R6, R8, R8
	UMULH R5, R5, R5
	EXTR $51, R16, R1, R1
	MUL R4, R9, R6
	ADC R2, R12, R12
	ADDS R14, R8, R8
	MUL R11, R13, R2
	UMULH R4, R9, R14
	ADC R5, R12, R12
	MUL R10, R15, R17
	ADDS R2, R6, R6
	UMULH R11, R13, R5
	EXTR $51, R8, R12, R12
	UMULH R10, R15, R2
	AND $2251799813685247, R16, R16
	ADC R5, R14, R14
	ADDS R17, R6, R15
	MUL R11, R9, R5
	ADC R2, R14, R14
	MUL R10, R13, R17
	AND $2251799813685247, R8, R8
	UMULH R10, R13, R6
	ADD R3, R16, R16
	UMULH R11, R9, R2
	ADDS R17, R5, R5
	MUL R4, R4, R10
	EXTR $51, R15, R14, R9
	UMULH R4, R4, R4
	ADC R6, R2, R2
	ADDS R10, R5, R5
	ADD R1, R8, R8
	ADC R4, R2, R2
	AND $2251799813685247, R5, R4
	ADD R9, R4, R9
	AND $2251799813685247, R15, R6
	EXTR $51, R5, R2, R2
	LSR $51, R9, R10
	ADD R12, R6, R5
	ADD R2<<2, R2, R4
	AND $2251799813685247, R8, R6
	ADD R10<<2, R10, R3
	AND $2251799813685247, R9, R9
	LSL $2, R4, R1
	AND $2251799813685247, R16, R4
	SUB R2, R1, R1
	LSL $2, R3, R2
	ADD R7, R1, R1
	SUB R10, R2, R2
	AND $2251799813685247, R5, R7
	AND $2251799813685247, R1, R3
	ADD R5>>51, R9, R5
	ADD R8>>51, R7, R8
	ADD R16>>51, R6, R16
	ADD R1>>51, R4, R1
	ADD R3, R2, R2
	STP (R2, R1), (R0)
	STP (R16, R8), 16(R0)
	MOVD R5, 32(R0)
	RET